;
;1/8/98	v2.0	Drawing module added.

(defun c:fst (/ str_h str_l str_w stp_h stp_w stp_n )
	(princ "\FishLISP. Draw stair section. Version 2.0 ")
	(if f_str_h nil (setq f_str_h 3000.0))
	(if f_stp_h nil (setq f_stp_h 150.0))
	(princ "\nHigh of stair <")
	(if f_str_h (princ f_str_h) (princ "3000.0"))
	(setq str_h (getreal ">:"))
	(if str_h nil (setq str_h f_str_h))
	(setq f_str_h str_h)

	(princ "\nHigh of step <")
	(if f_stp_h (princ f_stp_h) (princ "150.0"))
	(setq stp_h (getreal ">:"))
	(if stp_h nil (setq stp_h f_stp_h))
	(setq 
		f_stp_h stp_h
		stp_n (fix (/ str_h stp_h))
		stp_h (/ str_h stp_n)
		stp_w (fix (- 450.0 stp_h))
	)
	(princ "\nWidth of steps<")
	(princ stp_w)
	(setq stp_w (getreal ">:"))
	(if (= stp_w nil) (setq stp_w (- 450.0 stp_h)))
	(setq str_l (* (1- stp_n) stp_w))
	(princ "\nSTAIR == Hight: ")
	(princ str_h)
	(princ "\tLength: ")
	(princ str_l)
	(princ "\nSTEPS == Hight: ")
	(princ stp_h)
	(princ "\tWidth:")
	(princ stp_w)
	(princ "\tAmount: ")
	(princ stp_n)
	(initget "Yes No")
	(setq kwd (getkword "\nDraw stair? <Yes>/No"))
	(if kwd nil (setq kwd "Yes"))
	(if (= kwd "Yes") (drw_st))
	(princ)
)

(defun drw_st (/ a90 pt0 pt1 pt2 pt3 pt4 pt5 pt6 pt7 pt8 pt9 pt10)
	(setvar "cmdecho" 0)
	(cmd "zoom" "1x")
	(setq 
		pt0 (getpoint "\nStart point of stair: ")
		pt1 pt0
		a90 (/ pi 2)
	)
	(initget "Left Right")
	(cond 
		((= f_st_dir "Left")
			(setq kwd (getkword "\nChoice direction: [Left]<Right> "))
			(if kwd nil (setq kwd "Right"))
		)
		((= f_st_dir "Right")
			(setq kwd (getkword "\nChoice direction: [Right]<Left> "))
			(if kwd nil (setq kwd "Left"))
		)
		((not f_st_dir)
			(setq kwd (getkword "\nChoice direction: [Left/Right] "))
		)
	)
	(setq f_st_dir kwd)
	(if (= kwd "Left") (setq dir pi) (setq dir 0))

	(initget "Section Elevation")
	(princ "\nStair segment is: ")
	(cond 
		((= f_st_seg "Section")
			(setq kwd (getkword "[Section]<Elevation> "))
			(if kwd nil (setq kwd "Elevation"))
		)
		((= f_st_seg "Elevation")
			(setq kwd (getkword "[Elevation]<Section> "))
			(if kwd nil (setq kwd "Section"))
		)
		((not f_st_seg)
			(setq kwd (getkword "[Elevation/Section] "))
		)
	)
	(setq f_st_seg kwd)
	(repeat stp_n
		(setq 
			pt2 (polar pt1 a90 stp_h)
			pt3 (polar pt2 dir stp_w)
		)
		(if pt4 nil (setq pt4 (polar pt2 a90 -300)))
		(drw_line pt1 pt2)
		(drw_line pt2 pt3)
		(setq pt1 pt3)
	)
	(entdel (entlast))
	(if (= kwd "Elevation") (entdel (entlast)))
	(setq 
		pt5 (polar pt0 a90 -300)
		pt6 (polar pt5 dir -200)
		pt7 (polar pt6 a90 200)
		pt8 (polar pt2 a90 -300)
		pt9 (polar pt8 dir 200)
		pt10 (polar pt9 a90 200)
	)
	(if (= kwd "Section") 
		(progn
			(drw_line pt4 pt5)
			(drw_line pt5 pt6)
			(drw_line pt6 pt7)
			(drw_line pt8 pt9)
			(drw_line pt9 pt10)
		)
	)

	(drw_line pt4 pt8)

	(setvar "cmdecho" 1)

)


(defun drw_line (lpt1 lpt2 / lay)
	(if (= kwd "Section") (setq lay FLLT_WALL) (setq lay "0"))
	(entmake (list '(0 . "line") (cons 8 lay) (cons 10 (trans lpt1 1 0)) (cons 11 (trans lpt2 1 0))))
)

(princ "Start as C:FST")
